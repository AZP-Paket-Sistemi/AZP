#!/bin/bash

### AZP Paket Meneceri 4.0
# AZP Offical Site: https://azp-paket-sistemi.github.io
# AZP Offical Depo: https://azp-paket-sistemi.github.io/azp-depo

# © 2021-2023 AZP
# © 2019-2023 PacPERRO


# Tərcümə faylı
TEXTDOMAINDIR=/usr/share/locale
TEXTDOMAIN=azp

# Rənglər
error=$(echo -e "\033[1;31m E: \033[:0m")
process=$(echo -e "\033[1;34m P: \033[:0m")
finished=$(echo -e "\033[1;32m F: \033[:0m")
remove=$(echo -e "\033[1;31m R: \033[:0m")
info=$(echo -e "\033[1;36m I: \033[:0m")
warning=$(echo -e "\033[1;33m V: \033[:0m")

# Root kontrol
if [ $UID -ne 0 ]
then
  echo "$error" $"Please open with root !" &>/dev/stderr
  exit 1
fi

# Bağımlılıqları yoxlama
depends="zip unzip wget tar"
for i in ${depends}; do
  if ! command -v "${i}" &>/dev/null; then
    echo "$error" "${i}" $" -- not installed !"
    exit 1
  fi
done

# Köhnə data silmə
datarm() {
   if [[ -d /tmp/azptmp ]]
   then
     rm -r /tmp/azptmp
     echo "$remove" $"Old data removed"
   fi
}
datarm

# Prosessor arxitekturası
arch=$(uname -m)

# Arxitektura əlavə etmə
add_architecture(){
  rm -r /var/cache/azp/azp-architecture &>/dev/null
  if [[ $arch == "x86_64" ]]
  then
    echo "$process" $"Add arhitecture ==" "amd64"
    echo "amd64" >> /var/cache/azp/azp-architecture
    return 1
  fi
  echo "$process" $"Add arhitecture ==" "$arch"
  echo "$arch" >> /var/cache/azp/azp-architecture
}
if [ ! -f /var/cache/azp/azp-architecture ]
then
  add_architecture
fi

# azp-tools yoxlama
for azp_tools in "azp-version azp-depends azp-repo azp-about";
do
  [[ -f /usr/bin/${azp_tools} ]] && echo "$error" "${azp_tools}" $" -- tools not found" && sleep 1 && exit 1
done

# Depo Əlavə Etmə
[[ ! -d /etc/azp ]] && mkdir -p /etc/azp/
[[ ! -d /etc/azp/azp-depo ]] && mkdir -p /etc/azp/azp-depo
[[ ! -d /var/cache/azp ]] && mkdir -p /var/cache/azp
 # -- AZP Rəsmi sayt link --
 rm -r /var/cache/azp/azp-depo &>/dev/null
 wget -O /var/cache/azp/azp-depo https://raw.githubusercontent.com/AZP-Paket-Sistemi/AZP/main/azp-depo &>/dev/null
if ! [ -f /etc/azp/azp-depo/depo ] && [ -f /var/cache/azp/azp-depo ]
then
  azp-repo
fi
azp_pack_depo=$(cat /etc/azp/azp-depo/depo)


# Proqram data qovluğu icazəsi
opnperr(){
  chattr -i /var/cache/azp/applications &>/dev/null
  chattr -i /var/cache/azp/applications/$1 &>/dev/null
}
clsperr(){
  chattr +i /var/cache/azp/applications/$1 &>/dev/null
  chattr +i /var/cache/azp/applications/ &>/dev/null
}


# Bağımlılıq oxuyucu
azpdepends_read() {
   dependsname=$1
   program=$2
   touch azpdependsrd
   prglist=$(ls -d /var/cache/azp/applications/*)
   echo "$prglist" >> prglist
   grep -v "/var/cache/azp/applications/$program" prglist > tmpfile && mv tmpfile prglist
   for instdprg in $(cat prglist);
   do
     if [ -f ${instdprg}/depends ]
     then
       for depends in $(cat ${instdprg}/depends);
       do
         if [ ${depends} == $dependsname ]
         then
           echo "1" >> azpdependsrd
         fi
       done
     fi
   done
   dependsrd=$(cat azpdependsrd)
   if [ ${#dependsrd} -ge 1 ]
   then
     echo "1"
   else
     echo "0"
   fi
   rm -r azpdependsrd prglist
}


if [[ "$1" == "" ]]
then
  echo -e """\033[1;34m

   _________________________________
   |              ___________      |
   |       /\    |___  /  __ \     |
   |      /  \      / /| |__) |    |
   |     / /\ \    / / |  ___/     |
   |    / ____ \  / /__| |         |
   |   /_/    \_\/_____|_|         |                               
    \                             /
     -----------------------------

                
           <<  || 4.0 || >>
                -------
  """

  echo -e """

   Azərbaycanın yerli Linux paket meneceri
   (Azerbaijan local Linux package manager)

   Yardım: azp -h
   Help: azp -h

   AZP Offical Site: https://azp-paket-sistemi.github.io
   AZP Depo: https://azp-paket-sistemi.github.io/azp-depo
   PacPERRO: https://pacperro-os.github.io

           © 2021-2023 AZP

  \033[:0m"""
fi

mkdir -p /etc/azp/azp-depo &>/dev/null
mkdir -p /var/cache/azp-archives &>/dev/null


# Paket quraşdırma
if [[ "$1" == "-i" ]]
then
  pack_ins(){
    paket_adi=$1
    if ! unzip ${paket_adi} -d /tmp/azptmp &>/dev/null
    then
      echo "$error" $"The package could not be broken !" &>/dev/stderr
      exit 1
    else
      echo "$process" $"Files Extract..."
    fi
    cd /tmp/azptmp
    i_program=$(cat app-name)
    opnperr $paket_adi
    # Proqramın quraşdırılmış olub olmamasını yoxlama
    if [ -d /var/cache/azp/applications/$i_program ]
    then
      program_version=$(sed -n 3p /var/cache/azp/applications/$i_program/info)
      echo "$warning" "$i_program" $"== Installed program" "(${program_version:9})"
      cd $termdir
      exit
    fi
    # Paket bağımlılıqları quraşdırma
    if [ -f depends ]
    then
      source /usr/bin/azp-depends
      for i_dep in $(cat /tmp/azptmp/depends);
      do
        depends ${i_dep}
      done
      opnperr $i_program
    fi
    info=$(sed -n 1p info)
     # 'info' faylına yazılanları yoxlama
      line_name=$(sed -n 1p info)
      if [[ "${line_name:0:5}" != "name:" ]]
      then
        echo "$error" $"'name:' not spelled correctly in 'info' file!" &>/dev/stderr
        rm -r /var/cache/azp/applications/$i_program
        exit 1
      fi
      line_description=$(sed -n 2p info)
      if [[ "${line_description:0:12}" != "description:" ]]
      then
        echo "$error" $"'description:' not spelled correctly in 'info' file!" &>/dev/stderr
        rm -r /var/cache/azp/applications/$i_program
        exit 1
      fi
      if [[ "${line_description:14}" == "*" ]]
      then
         line_description_ct=$(sed -n 5p info)
         if [[ ${line_description_ct:0:12} != "descritpion:" ]]
         then
           echo "$error" $"'description:' not spelled correctly in 'info' file!" &>/dev/stderr
           rm -r /var/cache/azp/applications/$i_program
           exit 1
         fi
      fi
      line_version=$(sed -n 3p info)
      if [[ "${line_version:0:8}" != "version:" ]]
      then
        echo "$error" $"'version:' not spelled correctly in 'info' file!" &>/dev/stderr
        rm -r /var/cache/azp/applications/$i_program
        exit 1
      fi
      line_version=$(sed -n 4p info)
      if [[ "${line_version:0:11}" != "maintainer:" ]]
      then
        echo "$error" $"'maintainer:' not spelled correctly in 'info' file!" &>/dev/stderr
        rm -r /var/cache/azp/applications/$i_program
        exit 1
      fi
      if [ "${info:6}" != ${i_program} ]
      then
        echo "$error" $"The program names in the 'files' and 'app-name' files do not match!" &>/dev/stderr
        rm -r /var/cache/azp/applications/$i_program
        exit 1
      fi
    if ! [ -f app-name ]
    then
      echo "$error" $"'app-name' not found, package invalid" &>/dev/stderr
      rm -r /tmp/azptmp &>/dev/null
      rm -r /var/cache/azp/applications/$i_program
      exit 1
    fi
    if ! [ -s app-name ]
    then
      echo "$error" $"the 'app-name' file is not written!" &>/dev/stderr
      rm -r /var/cache/azp/applications/$i_program
      exit 1
    fi
    # Quraşdırılacaq proqramın qovluğu
    mkdir -p /var/cache/azp/applications/$i_program &>/dev/null
    if [ ! -f info ]
    then
      echo "$error" $"'info' not found, package invalid" &>/dev/stderr
      rm -r /tmp/azptmp &>/dev/null
      rm -r /var/cache/azp/applications/$i_program
      exit
    fi
    [[ ! -s info ]] && echo "$error" $"the 'info' file is not written!" && exit
    # arch kontrol
    line_arch=$(sed -n 5p info)
    if [[ ${line_arch:0:13} == "architecture:" ]]
    then
      if [[ ${line_arch:14} != ${arch} ]] && [[ ${line_arch:14} != "amd64" ]]
      then
        echo "$error" $"Software arch is incompatible with processor arch" &>/dev/stderr
        echo $"Processor Arch: " "${arch}"
        echo $"Program Arch: " "${line_arch:6}"
      fi
    fi
    if ! [ -f src.tar.bz2 ]
    then
      echo "$error" $"'src.tar.bz2' not found, package invalid" &>/dev/stderr
      rm -r /tmp/azptmp &>/dev/null
      rm -r /var/cache/azp/applications/$i_program
      exit
    fi
    cp -a info /var/cache/azp/applications/$i_program
    cp -a app-name /var/cache/azp/applications/$i_program
    if [[ -f /tmp/azptmp/depends ]]
    then
      cp -r depends /var/cache/azp/applications/$i_program
    fi
    mkdir azpsrc
    if ! tar -xf src.tar.bz2 -C azpsrc;
    then
      echo "$error" $"There was a problem with the 'src' file !" &>/dev/stderr
      rm -r /tmp/azptmp &>/dev/null
      exit
    fi
    sleep 0.5
    # preins
    if [ -f /tmp/azptmp/preins ]
    then
      echo "$process" $"preins >> running..."
      ./preins
    fi
    # prerm
    if [ -f /tmp/azptmp/prerm ]
    then
      cp /tmp/azptmp/prerm /var/cache/azp/applications/$i_program
    fi
    echo "$(tar -tf src.tar.bz2)" >> srcfilelist
    cd azpsrc
    if ! [ -f ../src_md5sum ];
    then
      echo "$warning" $"'src_md5sum' md5sum file not found"
    else
      echo "$process" $"'src_md5sum' is checked for security..."
      sleep 0.4
      src_md5sum=$(cat ../src_md5sum)
      srcch_md5sum=$(find . -type f -exec md5sum {} + | LC_ALL=C sort)
      [[ $src_md5sum != $srcch_md5sum ]] && echo "$warning" $"In the package some files replaced !" && read -p "$warning" $"You want package install ? [h/y]: " safe_packins
      [[ $safe_packins == "h" ]] && echo "$process" $"Next process..."
      [[ $safe_packins == "y" ]] && echo "$process" $"Package data remove..." && rm -r /tmp/azptmp && rm -r /var/cache/azp/applications/$i_program && echo "$process" $"Process finished" && exit
    fi
    # Düzgün kopyalama prosesi
    echo "$process" $"Create files list..."
    for list in $(cat ../srcfilelist);
    do
      if [ -f ${list} ]
      then
        echo "/${list}" >> /var/cache/azp/applications/$i_program/files
        echo "${list}" >> copyfilelist
      else
        echo "${list}" >> folderslist
      fi
    done
    [[ ! -f copyfilelist ]] && touch copyfilelist
    echo "$process" $"Create folders list..."
    touch /tmp/azptmp/notfolders
    for folders in $(cat folderslist);
    do
      if [ ! -s /${folders} ]
      then
        echo "${folders}" >> /tmp/azptmp/notfolders
      fi
    done
    for notfolders in $(cat /tmp/azptmp/notfolders);
    do
      mkdir -p /${notfolders}
      echo "/${notfolders}" >> /var/cache/azp/applications/$i_program/files
    done
    echo "$process" $"Files copied to file system..."
    for cplist in $(cat copyfilelist);
    do
      cp -a ${cplist} /${cplist}
    done
    [[ ! -f /var/cache/azp/applications/$i_program/files ]] && touch /var/cache/azp/applications/$i_program/files
    # postins
    if [ -f /tmp/azptmp/postins ]
    then
      echo "$process" $"postins >> running..."
      cd ..
      ./postins
      cd azpsrc
    fi
    # postrm
    if [ -f /tmp/azptmp/postrm ]
    then
      cp /tmp/azptmp/postrm /var/cache/azp/applications/$i_program
    fi
    # Proqram məlumatlarını güncəlləmə
    cd /var/cache/azp/applications/$i_program
    # Proqram məlumatlarını nüxsələmə
    appdata_files="app-name info files depends postrm prerm"
    for prgafiles in "$appdata_files";
    do
      tar -zcvf azp-reinfo-$i_program.tar.gz ${prgafiles} &>/dev/null
    done
    # Nüxsəni kopyalama
    cp -a azp-reinfo-$i_program.tar.gz /var/backups/
    rm -r azp-reinfo-$i_program.tar.gz
    cd $termdir
    clsperr $i_program
    rm -r /tmp/azptmp
    echo "$finished" $"Installation is complete"
  }
  
  for paket_adi in "${@:2}";
  do
    mkdir /tmp/azptmp
    if [ ! -f $paked_adi ]
    then
      echo "$error" $"Package Not Found !" &>/dev/stderr
      exit 1
    fi
    termdir=$(pwd -L)
    if [[ "$paket_adi" == "" ]]
    then
      echo "$error" $"The package was not selected !" &>/dev/stderr
      exit 1
    fi
    for paket in ${paket_adi};
    do
      pack_ins ${paket}
    done
  done
fi



# Proqram Silmə
if [[ "$1" == "-r" ]]
then  
  if ! [[ "${@:2}" != "" ]]
  then
    echo "$error" $"The program was not selected !" &>/dev/stderr
    exit 1
  fi
  termdir=$(pwd -L)
  # Proqram ləğv etmə funksiyası
  prg_rm() {
    for r_program in $1;
    do
    opnperr $r_program
    cd /var/cache/azp/applications &>/dev/null
    if ! cd $r_program &>/dev/null; then
      echo "$error" "$r_program "$"== There is no such program !" &>/dev/stderr
      exit 1
    fi
    echo "$remove" "$r_program" $"== remove program..."
    if [ ${r_program:0:3} == "lib" ]
    then
      read -p "Can be library is a system library. Are you sure the library delete ? [h/y]:" lib_r_secim
      [[ $lib_r_secim == "y" ]] && exit
    fi
    if [ -f /var/cache/azp/applications/$r_program/depends ]
    then
      read -p $"Find and delete depends ? [h/y]: " depends_r_secim
      if [[ "$depends_r_secim" == "h" ]]
      then
        for depends in $(cat /var/cache/azp/applications/$r_program/depends);
        do
          dependsrd=$(azpdepends_read ${depends} $r_program)
          if [[ ${dependsrd} == "0" ]]
          then
            source /usr/bin/azp-depends
            if ! dependsr ${depends};
            then
              return
            fi
          else
            echo "$warning" $"Program depends not delete. Because, this depends used other program"
          fi
        done
      fi
      [[ "$depends_r_secim" == "y" ]] && echo "$process" $"Next process..."
    fi
    # prerm
    if [ -f /var/cache/azp/applications/$r_program/prerm ]
    then
      echo "$process" $"prerm >> running..."
      ./prerm
    fi
    if [[ ! -f /var/cache/azp/applications/$r_program/files ]];
    then
      echo "$error" $"'files' not found !"
      exit 1
    fi
    for fayllar in $(cat /var/cache/azp/applications/$r_program/files);
    do
      rm -r ${fayllar} &>/dev/null
      cd $termdir
    done
    rm_program=$(cat /var/cache/azp/applications/$r_program/app-name)
    # postrm
    if [ -f /var/cache/azp/applications/$r_program/postrm ]
    then
      echo "$process" $"postrm >> running..."
      cd $r_program
      ./postrm
      cd ..
    fi
    opnperr $r_program
    rm -r /var/cache/azp/applications/$rm_program
    sleep 1
    cd $termdir
    clsperr $r_program
    done
  }
   if [[ "${@: $# - 0}" != "-h" ]]
   then
     echo "$info" $"Programs to remove:"
     echo "$info" "${@:2}"
     read -p $"Remove application ? [h/y]: " program_r_secim
   else
     argvn=$(($# - 2))
     for rmprgh in ${@:2:$argvn};
     do
       prg_rm ${rmprgh}
     done
     echo "$finished" $"Process Finished"
   fi
   if [[ $program_r_secim != "y" ]] && [[ $program_r_secim != "h" ]]
   then
     echo "$finished" $"Exit"
     exit
   fi
  [[ "$program_r_secim" == "y" ]] && echo "$finished" $"Exit" && exit
  if [[ "$program_r_secim" == "h" ]]
  then
    for rmprg in ${@:2};
    do
      prg_rm ${rmprg}
    done
    echo "$finished" $"Process Finished"
  fi
fi



# Proqram Haqqında Məlumat
if [[ "$1" == "-a" ]]
then
  program_info=$2
  if ! [[ "$program_info" != "" ]]
  then
    echo "$error" $"The program was not selected !" &>/dev/stderr
    exit
  fi
  opnperr $program_info
  if ! [[ -d /var/cache/azp/applications/$program_info ]]
  then
    echo "$error" $"Application not found !" &>/dev/stderr
    exit 1
  fi
  echo "-------------------"
  if ! [[ -f /var/cache/azp/applications/$program_info/info ]]
  then
    echo "$error" $"'info' file not found !" &>/dev/stderr
    exit 1
  fi
  for d in $(grep -n "description:" /var/cache/azp/applications/$program_info/info);
  do
    if [[ ${d:0:1} -gt 2 ]]
    then
       ldesct=$(sed -n ${d:0:1},1000p /var/cache/azp/applications/$program_info/info)
     fi
  done
  name=$(sed -n 1p /var/cache/azp/applications/$program_info/info)
  description=$(sed -n 2p /var/cache/azp/applications/$program_info/info)
  version=$(sed -n 3p /var/cache/azp/applications/$program_info/info)
  maintainer=$(sed -n 4p /var/cache/azp/applications/$program_info/info)
  description1=$ldesct
  description_out=$([[ "${description:13}" != "*" ]] && echo "${description:13}" || echo "${description1:13}")
  echo -e "\033[1;32m name:\033[:0m" "\033[1;37m${name:6}\033[:0m"
  echo -e "\033[1;32m description:\033[:0m" "\033[1;37m$description_out\033[:0m"
  echo -e "\033[1;32m version:\033[:0m" "\033[1;37m${version:9}\033[:0m"
  echo -e "\033[1;32m maintainer:\033[:0m" "\033[1;37m${maintainer:12}\033[:0m"
  clsperr $program_info
fi




# Quraşdırılan proqramlar listəsi
if [[ "$1" == "-pl" ]]
then
  pl(){
    if ! cd /var/cache/azp/applications/ &>/dev/null;
    then
      echo "$error" "/var/cache/azp/applications/" $"== folder not found !"
      exit 1
    fi
    echo "$(ls /var/cache/azp/applications)" >> /var/cache/azp/apps-list
    echo $"Apps:"
    for apps_list in $(cat /var/cache/azp/apps-list);
    do
      if [ ${apps_list:0:3} == "lib" ]
      then
        echo -e "\033[1;32m Lib: \033[:0m" "${apps_list}"
      else
        echo -e "\033[1;35m App: \033[:0m" "${apps_list}"
      fi
    done
  }
  if [[ "$2" == "-listfile" ]]
  then
    direction=$(pwd -L)
    if [[ $direction == "" ]]
    then
      echo "$error" $"Direction not found"
      exit 1
    fi
    pl
    cp -a /var/cache/azp/apps-list $direction
    rm -r /var/cache/azp/apps-list
    echo "$finished" $"Apps list created"
  else
    pl
    rm -r /var/cache/azp/apps-list
  fi
fi



# Depodan yükləmə və quraşdırma
if [[ "$1" == "install" ]]
then
  # AZP paket yükləyici
  azp_packdownload(){
    repo_ad=$1
    architecture=$(cat /var/cache/azp/azp-architecture)
    # Proqramın quraşdırılmış olub olmamasını yoxlama
    if [ -d /var/cache/azp/applications/$repo_ad ]
    then
      program_version=$(sed -n 3p /var/cache/azp/applications/$repo_ad/info)
      echo "$warning" "$repo_ad" $"== Installed program" "(${program_version:9})"
      cd $termdir
      exit
    fi
    if [[ "$architecture" == "amd64" ]]
    then
      if ! wget $azp_pack_depo/${repo_ad:0:1}/$repo_ad/latest-file &>/dev/null;
      then
        echo -e "$error" $"Depo not connect !" &>/dev/stderr
        rm -r /tmp/azp-depoins &>/dev/null
        exit 1
      fi
    else
      if ! wget $azp_pack_depo/${repo_ad:0:1}/$repo_ad/latest-file_$architecture &>/dev/null;
      then
        echo -e "$error" $"Depo not connect or architecture package not found" &>/dev/stderr
        rm -r /tmp/azp-depoins &>/dev/null
        exit 1
      fi
    fi
    echo "$process" $"The repo file is read ..."
    if [[ "$architecture" == "amd64" ]]
    then
      latest_file=$(cat latest-file)
    else
      latest_file=$(cat latest-file_$architecture)
    fi
    if [ -f /var/cache/azp-archives/$latest_file ]
    then
      echo "$process" "$latest_file" $"There is an package so this package will be installed"
      azp -i /var/cache/azp-archives/$latest_file
      rm -r /tmp/azp-depoins &>/dev/null
      exit
    fi
    echo -e "\033[1;34m ------------ \033[:0m"
    echo -e "\033[1;35m Depo: $azp_pack_depo \033[:0m"
    echo -e "\033[1;35m Package: $azp_pack_depo/${repo_ad:0:1}/$repo_ad/$latest_file \033[:0m"
    echo -e "\033[1;34m ------------ \033[:0m"
    echo "$process" "$latest_file" $"package download..."
    packlink="$azp_pack_depo/${repo_ad:0:1}/$repo_ad/$latest_file"
    if ! wget -q --show-progress $packlink
    then
      echo "$error" $"Package not download !" &>/dev/stderr
      azp -i /var/cache/azp-archives/$latest_file
      exit 1
    fi
  }
  
  for repo_app in "${@:2}";
  do
  opnperr $repo_app
  if [ -d /tmp/azp-depoins ]
  then
    echo "$remove" $"Old data remove..."
    rm -r /tmp/azp-depoins &>/dev/null
  fi
  termdir=$(pwd -L)
  mkdir -p /tmp/azp-depoins
  cd /tmp/azp-depoins &>/dev/null
  if ! [[ "$@" != "" ]]
  then
    echo "$error" $"The program was not selected !"
    exit 1
  fi
  azp_packdownload ${repo_app}
  echo "$process" $"Package backup..."
  architecture=$(cat /var/cache/azp/azp-architecture)
  if [[ $architecture == "amd64" ]]
  then
    latest_file=$(cat latest-file)
  else
    latest_file=$(cat latest-file_$architecture)
  fi
  cp $latest_file /var/cache/azp-archives/
  echo "$process" $"Read data..."
  echo "$(du -h $latest_file) -- $latest_file -- $(date -u)" >> /var/cache/azp-archives/archives
  azp -i ${latest_file}
  rm -r /tmp/azp-depoins &>/dev/null
  cd $termdir
  clsperr $repo_app
  done
fi




# Depodaki seçdiyiniz kategoriyada proqramları görmək
if [[ "$1" == "-dpl" ]]
then
  read -p $"Category [a,b,c]: " depo_pl
  if ! [ -f /var/cache/azp/program-list ]
  then
    rm -r program-list &>/dev/null
  fi
  if ! wget -O /var/cache/azp/program-list $azp_pack_depo/$depo_pl/program-list &>/dev/null;
  then
    echo "$error" $"There is no such category !" &>/dev/stderr
    exit
  fi
  echo "$output" "'$depo_pl'" $" apps:"
  for depo_apps_list in $(cat /var/cache/azp/program-list);
  do
    if [ ${depo_apps_list:0:3} == "lib" ]
    then
      echo -e "\033[1;32m Lib: \033[:0m" "${depo_apps_list}"
    else
      echo -e "\033[1;35m App: \033[:0m" "${depo_apps_list}"
    fi
  done
  rm -r /var/cache/azp/program-list
fi



# AZP son versiyaya yeniləmə
if [[ "$1" == "upgrade" ]]
then
  opnperr
  source azp-version
  upgrade
  clsperr
fi



# AZP versiya göstərici
if [[ "$1" == "-stversion" ]]
then
  source azp-version
  stversion
fi




# Standart AZP deposu ayarlama
if [[ "$1" == "-azpd" ]]
then
   mkdir -p /tmp/azp_depo_add
   cd /tmp/azp_depo_add
   wget $azp_offical_depo/[depo]/depo.zip &>/dev/null
   mkdir depo_file
   echo "$process" $"'depo.zip' extract..."
   unzip depo.zip -d depo_file &>/dev/null
   cd depo_file
   dlink=$(cat depo)
   echo -e "\033[1;35m AZP Repo: $dlink \033[:0m"
   echo -e "\033[1;32m depo == /etc/azp/azp-depo \033[:0m"
   echo -e "\033[1;32m info-depo == /etc/azp/azp-depo \033[:0m"
   cp -p info info-depo /etc/azp/azp-depo/
   cd ..
   cd ..
   rm -r /tmp/azp_depo_add
fi




# Hər hansı rəsmi olmayan AZP deposu əlavə etmə
if [[ "$1" == "-azpdo" ]]
then
  if [ -f /etc/azp/azp-depo/depo ] && [ -f /var/cache/azp/azp-depo ]
  then
    rm -r /etc/azp/azp-depo/depo /var/cache/azp/azp-depo
  fi
  azp-repo
fi




# AZP log təmizləmə
if [[ "$1" == "-apc" ]]
then
  apc(){
    echo "$process" $"Deleting azp packages..."
    rm -r /var/cache/azp-archives/* &>/dev/null
    echo "# AZP Archives" >> /var/cache/azp-archives/archives
    echo "$finished" $"Process Finished"
  }
  if [ ! -f /var/cache/azp-archives/*.azp ];
  then
    echo "$error" $"Not cleaned azp packages" && exit
  fi
  if [[ $2 == "-h" ]]
  then 
    apc
    exit
  fi
  echo -e "\033[1;34m $(cat /var/cache/azp-archives/archives) \033[:0m"
  read -p $"Some .azp packages were found. Delete packages ? [h/y]: " packages_delete
  if [ "$packages_delete" == "h" ]
  then
    apc
  fi
  [[ "$packages_delete" == "y" ]] && echo "$finished" $"Exit" && exit
fi



# Proqram məlumtlarını yenidən yığma
if [[ "$1" == "-reinfo" ]]
then
  reinfo_app=$2
  opnperr $reinfo_app
  mkdir -p /tmp/reinfo-$reinfo_app
  echo "$process" "$reinfo_app" $"== building info"
  prfiles="app-name files info $([[ -f $prfiles/depends ]] && echo "$prfiles/depends")"
  if ! tar -xf /var/backups/azp-reinfo-$reinfo_app.tar.gz -C /tmp/reinfo-$reinfo_app &>/dev/null;
  then
    echo "$error" "azp-reinfo-$reinfo_app.tar.gz" $"== could not be extract !"
    exit 1
  fi
  for prs in ${prfiles};
  do
    cp -prf /tmp/reinfo-$reinfo_app/${prs} /var/cache/azp/applications/$reinfo_app/${prs}
  done
  clsperr $reinfo_app
  rm -r /tmp/reinfo-$reinfo_app &>/dev/null
  echo "$finished" $"Process Finished"
fi


# Quraşdırılan programı güncəlləmə
if [[ "$1" == "update" ]]
then
  update_program=$2
  touch /tmp/appupdt
  if [[ "$update_program" == "" ]]
  then
    echo "$error" $"The program was not selected !"
    exit 1
  fi
  azp -r $update_program -h
  azp -apc -h
  echo "$process" "$update_program" $"== updating program..."
  azp install $update_program
  rm -r /tmp/appupdt
fi



# AZP mənbə paketi quraşdırma
if [[ "$1" == "-azpsrc-build" ]]
then
  pack=$2
  opnperr $pack
  if [[ $pack == "" ]]
  then
    echo "$error" $"The program was not selected !"
    exit 1
  fi
  source azpsource-build
  azps_build $pack
  clsperr $pack
fi




# AZP mənbə paketini normal paketə çevirmə
if [[ "$1" == "-azpsrc-cazp" ]]
then
  pack=$2
  opnperr
  if [[ "$pack" == "" ]]
  then
    echo "$error" $"The program was not selected !"
    exit 1
  fi
  source azpsource-build 
  azps_cazp $pack
  clsperr
fi




# AZP mənbə kodu qabıq skriptini normal paketə çevirmə
if [[ "$1" == "-azpsh-build" ]]
then
  scrname=$2
  opnperr
  if [[ "$scrname" == "" ]]
  then
    echo "$error" $"The program was not selected !"
    exit 1
  fi
  if [[ "$3" == "-ins" ]]
  then
    source azpsource-build 
    azpbs_build $scrname -ins
  else
    source azpsource-build
    azpbs_build $scrname
  fi
  clsperr
fi




# AZP depo məlumatları
if [[ "$1" == "-depoinfo" ]]
then
  echo -e "\033[1;34m AZP\033[:0m" $"repo info"
  echo -e "\033[1;32m ------------------------ \033[:0m"
  depo_name=$(sed -n 1p /etc/azp/azp-depo/info-depo)
  depo_description=$(sed -n 2p /etc/azp/azp-depo/info-depo)
  depo_link=$(sed -n 3p /etc/azp/azp-depo/info-depo)
  echo "$info" $"REPO Name:""${depo_name:6}"
  echo "$info" $"REPO Description:" "${depo_description:13}"
  echo "$info" $"REPO Link:" "${depo_link:6}"
fi




# Arxitektura əlavə etmə
if [[ "$1" == "-add-architecture" ]]
then
  if [[ ! -f /var/cache/azp/azp-architecture ]]
  then
    touch /var/cache/azp/azp-architecture
  fi
  if [[ "$2" == "-auto" ]]
  then
    rm -r /var/cache/azp/azp-architecture
    if [[ "$arch" == "x86_64" ]]
    then
      echo "$process" $"Add arhitecture ==" "amd64"
      echo "amd64" >> /var/cache/azp/azp-architecture
      echo "$finished" $"Process Finished"
      exit
    fi
    echo "$process" $"Add arhitecture ==" "$arch"
    echo "$arch" >> /var/cache/azp/azp-architecture
    echo "$finished" $"Process Finished"
    exit
  fi
  architecture=$2
  rm -r /var/cache/azp/azp-architecture
  echo "$process" $"Add arhitecture ==" "$architecture"
  echo "$architecture" >> /var/cache/azp/azp-architecture
  echo "$finished" $"Process Finished"
fi


# Arxitektura oxuma
if [[ "$1" == "-archrd" ]]
then
  if [[ ! -f /var/cache/azp/azp-architecture ]]
  then
    echo "$error" $"Architecture file not found !"
    exit 1
  fi
  echo "$(cat /var/cache/azp/azp-architecture)"
fi




# AZP Gtk About ekranı
[[ "$1" == "-azpa" ]] && azp-about




# Yardım
if [[ "$1" == "-h" ]]
then
  echo "$info" "1) azp -i [package.azp]" $"= Install package"
  echo "$info" "2) azp -r [application]" $"= Remove application"
  echo "$info" "3)  azp -r [application1] [application2] -h" $"= Automatic remove selected application"
  echo "$info" "4) azp -a [application]" $"= Information about the program"
  echo "$info" "5) azp -pl" $"= Creates a list of installed programs"
  echo "$info" "6) azp -pl -listfile" $"= Creates a list of installed programs and copy select direction"
  echo "$info" "7) azp install [program]" $"= Installing programs from the repository"
  echo "$info" "8) azp upgrade" $"= Update AZP to the latest version"
  echo "$info" "9) azp -stversion" $"= AZP show version"
  echo "$info" "10) azp -dpl" $"= Indicates which programs are in the categories in the repository"
  echo "$info" "11) azp -azpd" $"= Add offical AZP Repo"
  echo "$info" "12) azp -azpdo" $"= Add unoffical other AZP Repo"
  echo "$info" "13) azp -azpa" $"= AZP About"
  echo "$info" "14) azp -apc" $"= AZP packages and arcives log clean"
  echo "$info" "15)  azp -apc -h" $"= Automatic clean AZP packages and arcives log"
  echo "$info" "16) azp -reinfo [application]" $"= Installed program info files rebuild"
  echo "$info" "17) azp update [application]" $"= Update the installed application"
  echo "$info" "18) azp -azpsrc-build [source_package]" $"= AZP source package install"
  echo "$info" "19) azp -azpsrc-cazp [source_package]" $"= AZP source package (.azps) convert to normal AZP package (.azp)"
  echo "$info" "20) azp -azpsh-build [source_script]" $"= AZP source script (.azpsh) convert to normal AZP package (.azp)"
  echo "$info" "21)  azp -azpsh-build [source_script] -ins" $"= AZP source script (.azpsh) convert to normal AZP package (.azp) and install system"
  echo "$info" "22) azp -depoinfo" $"= AZP repo info show"
  echo "$info" "23) azp -add-architecture [arch]" $"= Add architecture"
  echo "$info" "24)  azp -add-architecture -auto" $"= Reading and saving computer architecture"
  echo "$info" "25) azp -archrd" $"= Read saved architecture"
fi
