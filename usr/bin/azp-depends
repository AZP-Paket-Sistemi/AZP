#!/bin/bash

### AZP Paket Meneceri 4.0
# AZP Offical Site: https://azp-paket-sistemi.github.io
# AZP Offical Depo: https://azp-paket-sistemi.github.io/azp-depo

# © 2021-2023 AZP
# © 2019-2023 PacPERRO

TEXTDOMAINDIR=/usr/share/locale
TEXTDOMAIN=azp-depends

# Rənglər
error=$(echo -e "\033[1;31m E: \033[:0m")
process=$(echo -e "\033[1;34m P: \033[:0m")
finished=$(echo -e "\033[1;32m F: \033[:0m")
remove=$(echo -e "\033[1;31m R: \033[:0m")
info=$(echo -e "\033[1;36m I: \033[:0m")
warning=$(echo -e "\033[1;33m V: \033[:0m")

# Prosesor arxitekturası
arch=$(uname -m)

# Proqram data qovluğu icazəsi
opnperr(){
  chattr -i /var/cache/azp/applications &>/dev/null
  chattr -i /var/cache/azp/applications/$1 &>/dev/null
}
clsperr(){
  chattr +i /var/cache/azp/applications/$1 &>/dev/null
  chattr +i /var/cache/azp/applications/ &>/dev/null
}




source_depends(){
  azp_sourcedp=$1
  if ! [[ "$azp_sourcedp" != "" ]]
  then
    echo "$error" $"The script was not selected !"
    exit 1
  fi
  [ -d /tmp/azpstmp-source ] && rm -r /tmp/azpstmp-source
  termdir=$(pwd -L)
  mkdir -p /tmp/azpstmp-source
  if ! cp -a azpdepends_$azp_sourcedp /tmp/azpstmp-source;
  then
    echo "$error" "azpdepends_$azp_sourcedp" $"== script not found !"
    exit 1
  fi
  cd /tmp/azpstmp-source
  # azpbs script kontrol
  pack_name=$(grep -n 5p azpdepends_$azp_sourcedp)
  pack_release=$(grep -n 6p azpdepends_$azp_sourcedp)
  pack_version=$(grep -n 7p azpdepends_$azp_sourcedp)
  pack_maintainer=$(grep -n 8p azpdepends_$azp_sourcedp)
  pack_url=$(grep -n 9p azpdepends_$azp_sourcedp)
  pack_arch=$(grep -n 10p azpdepends_$azp_sourcedp)
  pack_source=$(grep -n 11p azpdepends_$azp_sourcedp)
  pack_packname=$(grep -n 12p azpdepends_$azp_sourcedp)
  pack_packtype=$(grep -n 13p azpdepends_$azp_sourcedp)
  pack_description=$(grep -n 14p azpdepends_$azp_sourcedp)
  [ ${pack_name:4} ! "name" ] && echo "$error" $"'name' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  [ ${pack_release:7} ! "release" ] && echo "$error" $"'release' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  [ ${pack_version:7} ! "version" ] && echo "$error" $"'version' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  [ ${pack_maintainer:10} ! "maintainer" ] && echo "$error" $"'maintainer' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  [ ${pack_url:3} ! "url" ] && echo "$error" $"'url' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  [ ${pack_arch:4} ! "arch" ] && echo "$error" $"'arch' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  [ ${pack_source:6} ! "source" ] && echo "$error" $"'source' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  [ ${pack_packname:7} ! "package" ] && echo "$error" $"'package' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  [ ${pack_packtype:8} ! "packtype" ] && echo "$error" $"'packtype' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  [ ${pack_description:11} ! "description" ] && echo "$error" $"'description' is not written in the 'azpdepends_$azp_sourcedp' file" && exit
  source azpdepends_$azp_sourcedp &>/dev/null
  if [ -d /var/cache/azp/applications/$name ]
  then
    program_version=$(sed -n 3p /var/cache/azp/applications/$name/info)
    echo "$warning" "$name" $"== Installed program" "(${program_version:9})"
    cd $termdir
    if [ -d /tmp/azpstmp/package ]
    then
      return
    else
      exit
    fi
  fi
  # Paketi yükləmə
  echo "$info" $"Source web:" "$url"
  echo "$info" $"Source package:" "$source"
  wget -q --show-progress $source
  mkdir -p /tmp/azpstmp-source/package
  # Paket tipi yoxlama
  # tar
  if [ $packtype = "tar" ]
  then
    if ! tar -xvf $package -C /tmp/azpstmp-source/package;
    then
      echo "$error" $"The package could not be broken !" &>/dev/stderr
      exit
    else
      echo "$process" $"Files Extract..."
    fi
  # zip
  elif [ $packtype = "zip" ]
  then
    if ! unzip $package -d /tmp/azpstmp-source/package;
    then
      echo "$error" $"The package could not be broken !" &>/dev/stderr
      exit
    else
      echo "$process" $"Files Extract..."
    fi
  fi
  cd package
  source ../azpdepends_$azp_sourcedp
  if command -v setup &>/dev/null;
  then
    if ! setup;
    then
      echo "$error" "setup" $"== work error !" &>/dev/stderr
    fi
  fi
  if ! build;
  then
    echo "$error" "build" $"== work error !" &>/dev/stderr
    exit 1
  fi
  echo "$process" $"Install source files..."
  # Keş fayl qovluğu
  mkdir -p /tmp/azpstmp_cacheprg_source
  if ! package /tmp/azpstmp_cacheprg_source/;
  then
    echo "$error" "package" $"== work error !" &>/dev/stderr
    exit
  fi
  if command -v config &>/dev/null;
  then
    if ! config /tmp/azpstmp_cacheprg_source;
    then
      echo "$error" "config" $"== work error !" &>/dev/stderr
    fi
  fi
  # AZP normal paket üçün yer ayırma
  echo "$process" $"AZP source package convert normal AZP package..."
  mkdir -p /tmp/azpnp_cache_source/azpsrc
  cp -a /tmp/azpstmp_cacheprg_source/* /tmp/azpnp_cache_source/azpsrc
  # 'app-name' və 'info' yazdırma
  # 'app-name'
  echo "$name" >> /tmp/azpnp_cache_source/app-name
  # 'info'
  echo "name: $name" >> /tmp/azpnp_cache_source/info
  if [ ${#description} -lt 120 ]
  then
    echo "description:$description" >> /tmp/azpnp_cache_source/info
  else
    echo "description: *" >> /tmp/azpnp_cache_source/info
    longdescription="description:$description"
  fi
  echo "version: $version" >> /tmp/azpnp_cache_source/info
  echo "maintainer: $maintainer" >> /tmp/azpnp_cache_source/info
  echo "architecture: $arch" >> /tmp/azpnp_cache_source/info 
  printf "$longdescription" >> /tmp/azpnp_cache_source/info 
  cd /tmp/azpnp_cache_source/azpsrc
  echo "$(find . -type f -exec md5sum {} + | LC_ALL=C sort)" >> ../src_md5sum
  tar -cvjSf ../src.tar.bz2 *
  cd ..
  rm -r azpsrc
  package_name=''$name'_'$version'.azp'
  zip $termdir/$package_name *
  rm -r /tmp/azpnp_cache_source /tmp/azpstmp_cacheprg_source /tmp/azpstmp-source
  echo "$finished" $"Package:" "== $termdir/$package_name"
  cd $termdir
  azp -i $package_name
  echo "$finished" $"Process finished"
}




# Bağımlılıq oxuyucu
azpdepends_read() {
   dependsname=$1
   program=$2
   touch azpdependsrd
   prglist=$(ls -d /var/cache/azp/applications/*)
   echo "$prglist" >> prglist
   grep -v "/var/cache/azp/applications/$program" prglist > tmpfile && mv tmpfile prglist
   for instdprg in $(cat prglist);
   do
     if [ -f ${instdprg}/depends ]
     then
       for depends in $(cat ${instdprg}/depends);
       do
         if [ ${depends} == $dependsname ]
         then
           echo "1" >> azpdependsrd
         fi
       done
     fi
   done
   dependsrd=$(cat azpdependsrd)
   if [ ${#dependsrd} -ge 1 ]
   then
     echo "1"
   else
     echo "0"
   fi
   rm -r azpdependsrd prglist
}

azp_pack_depo=$(cat /etc/azp/azp-depo/depo)
[[ -f /tmp/azpdpindp ]] && rm -r /tmp/azpdpindp &>/dev/null

# Bağımlılıq quraşdırma
depends(){
  [[ -d /tmp/azp-depends ]] && rm -r /tmp/azp-depends &>/dev/null
  [[ ! -d /tmp/azp-depends ]] && mkdir -p /tmp/azp-depends
  architecture=$(cat /var/cache/azp/azp-architecture)
    for depends in $1;
    do
     termdir=$(pwd -L)
     cd /tmp/azp-depends
     opnperr ${depends}
     if ! [ -d /var/cache/azp/applications/${depends} ]
     then
      [[ ! -d /tmp/azp-depends/${depends}/azptmp ]] && mkdir -p /tmp/azp-depends/${depends}/azptmp
      if ! wget $azp_pack_depo/${depends:0:1}/${depends}/latest-file &>/dev/null;
      then
        echo "$error" "${depends}" $" == depends not found !"
        rm -r /tmp/azp-depends &>/dev/null
        exit 1
      fi
      latestf=$(cat latest-file)
      if [ "$architecture" == "amd64" ]
      then
        if ! wget $azp_pack_depo/${depends:0:1}/${depends}/latest-file &>/dev/null;
          then
          echo -e "$error" $"Depo not connect !" &>/dev/stderr
          rm -r /tmp/azp-depoins &>/dev/null
          exit 1
        fi
      else
        if ! wget $azp_pack_depo/${repo_ad:0:1}/$repo_ad/latest-file_$architecture &>/dev/null;
        then
          echo -e "$error" $"Depo not connect or architecture package not found" &>/dev/stderr
          rm -r /tmp/azp-depoins &>/dev/null
          exit 1
        fi
      fi
      if [[ "$architecture" == "amd64" ]]
      then
        pack=$(cat latest-file)
      else
        pack=$(cat latest-file_$architecture)
      fi
      echo "$process" "$pack --" $"Download depends..."
      wget -q --show-progress $azp_pack_depo/${depends:0:1}/${depends}/$pack
      if [ ! -f $pack ]
      then
        echo "$error" $"Package Not Found !" &>/dev/stderr
        exit 1
      fi
      cp -r $pack /var/cache/azp-archives
      if ! unzip $pack -d /tmp/azp-depends/${depends}/azptmp &>/dev/null;
      then
        echo "$error" $"The package could not be broken !" &>/dev/stderr
        exit 1
      else
        echo "$process" $"Files Extract..."
      fi
      # AZP Archives faylını yeniləmə
      cp -r $pack /var/cache/azp-archives
      echo "$(du -h $pack) -- $pack -- $(date -u)" >> /var/cache/azp-archives/archives
      cd /tmp/azp-depends/${depends}/azptmp
      i_depends=$(cat app-name)
      info=$(sed -n 1p info)
      # Paket bağımlılıqları quraşdırma
      if [ -f depends ]
      then
        echo "$(cat depends)" >> /tmp/azp-depends-list
      fi
      mkdir -p /var/cache/azp/applications/$i_depends
      if [ ! -f info ]
      then
        echo "$error" $"'info' not found, package invalid" &>/dev/stderr
        rm -r /tmp/azp-depends/${depends}/azptmp &>/dev/null
        exit 1
      fi
      [[ ! -s info ]] && echo "$error" $"the 'info' file is not written!" &>/dev/stderr && exit
        # 'info' faylına yazılanları yoxlama
        line_name=$(sed -n 1p info)
        if [[ "${line_name:0:5}" != "name:" ]]
        then
          echo "$error" $"'name:' not spelled correctly in 'info' file!" &>/dev/stderr
          rm -r /var/cache/azp/applications/$i_depends
          exit 1
        fi
        line_description=$(sed -n 2p info)
        if [[ "${line_description:0:12}" != "description:" ]]
        then
          echo "$error" $"'description:' not spelled correctly in 'info' file!" &>/dev/stderr
          rm -r /var/cache/azp/applications/$i_depends
          exit 1
        fi
        if [[ "${line_description:14}" == "*" ]]
        then
           for ds in $(grep -n "description:" info);
           do
             if ! [[ ${ds:0:1} -gt 2 ]]
             then
                echo "$error" $"'description:' not spelled correctly in 'info' file! !" &>/dev/stderr
                rm -r /var/cache/azp/applications/$i_depends
                exit 1
             fi
           done
        fi
        line_version=$(sed -n 3p info)
        if [[ "${line_version:0:8}" != "version:" ]]
        then
          echo "$error" $"'version:' not spelled correctly in 'info' file!" &>/dev/stderr
          rm -r /var/cache/azp/applications/$i_depends
          exit 1
        fi
        line_version=$(sed -n 4p info)
        if [[ "${line_version:0:11}" != "maintainer:" ]]
        then
          echo "$error" $"'maintainer:' not spelled correctly in 'info' file!" &>/dev/stderr
          rm -r /var/cache/azp/applications/$i_depends
          exit 1
        fi
        if [ ${info:6} != ${i_depends} ]
        then
          echo "$error" $"The program names in the 'files' and 'app-name' files do not match!" &>/dev/stderr
          rm -r /var/cache/azp/applications/$i_depends
          exit 1
        fi
      if ! [ -f app-name ]
      then
        echo "$error" $"'app-name' not found, package invalid" &>/dev/stderr
        rm -r /tmp/azp-depends/${depends}/azptmp &>/dev/null
        rm -r /var/cache/azp/applications/$i_depends
        exit 1
      fi
      if ! [ -s app-name ]
      then
        echo "$error" $"the 'app-name' file is not written!" &>/dev/stderr
        rm -r /var/cache/azp/applications/$i_depends
        exit 1
      fi
      if ! [ -f src.tar.bz2 ]
      then
        echo "$error" $"'src.tar.bz2' not found, package invalid" &>/dev/stderr
        rm -r /tmp/azp-depends/${depends}/azptmp &>/dev/null
        rm -r /var/cache/azp/applications/$i_depends
        exit 1
      fi
      # arch kontrol
      line_arch=$(sed -n 5p info)
      if [[ ${line_arch:0:13} == "architecture:" ]]
      then
        if [[ ${line_arch:14} != ${arch} ]] && [[ ${line_arch:14} != "amd64" ]]
        then
          echo "$error" $"Software arch is incompatible with processor arch" &>/dev/stderr
          echo $"Processor Arch: " "${arch}"
          echo $"Program Arch: " "${line_arch:6}"
        fi
      fi
      cp -a info /var/cache/azp/applications/$i_depends
      cp -a app-name /var/cache/azp/applications/$i_depends
      if [ -f /tmp/azp-depends/${depends}/azptmp/depends ]
      then
        cp -r /tmp/azp-depends/${depends}/azptmp/depends /var/cache/azp/applications/$i_depends
      fi
      mkdir azpsrc
      if ! tar -xf src.tar.bz2 -C azpsrc;
      then
        echo "$error" $"There was a problem with the 'src' file !" &>/dev/stderr
        rm -r /tmp/azp-depends/${depends}/azptmp &>/dev/null
        exit 1
      fi
      sleep 0.5
      # preins
      if [ -f /tmp/azp-depends/${depends}/azptmp/preins ]
      then
        exec /tmp/azp-depends/${depends}/azptmp/preins
      fi
      echo "$(tar -tf src.tar.bz2)" >> azpsrc/srcfilelist
      cd azpsrc
        if ! [ -f ../src_md5sum ];
        then
          echo "$warning" $"'src_md5sum' md5sum file not found"
        else
          echo "$process" $"'src_md5sum' is checked for security..."
          sleep 0.4
          src_md5sum=$(cat ../src_md5sum)
          srcch_md5sum=$(find . -type f -exec md5sum {} + | LC_ALL=C sort)
          [[ $src_md5sum != $srcch_md5sum ]] && echo "$warning" $"In the package some files replaced !" && read -p "$warning" $"You want package install ? [h/y]: " safe_packins
          [[ "$safe_packins" == "h" ]] && echo "$process" $"Next process..."
          [[ "$safe_packins" == "y" ]] && echo "$process" $"Package data remove..." && rm -r /tmp/azptmp && rm -r /var/cache/azp/applications/$i_depends && echo "$process" $"Process finished" && exit
        fi
      # Düzgün kopyalama prosesi
      echo "$process" $"Create files list..."
      for list in $(cat srcfilelist);
      do
        if [ -f ${list} ]
        then
          echo "/${list}" >> /var/cache/azp/applications/$i_depends/files
          echo "${list}" >> copyfilelist
        else
          echo "${list}" >> folderslist
        fi
      done
      echo "$process" $"Create folders list..."
      touch /tmp/azp-depends/${depends}/azptmp/notfolders
       for folders in $(cat folderslist);
       do
         if [ ! -s /${folders} ]
         then
           echo "${folders}" >> /tmp/azp-depends/${depends}/azptmp/notfolders
         fi
       done
       for notfolders in $(cat /tmp/azp-depends/${depends}/azptmp/notfolders);
       do
         mkdir -p /${notfolders}
         echo "/${notfolders}" >> /var/cache/azp/applications/$i_depends/files
       done
      echo "$process" $"Files copied to file system..."
       for cplist in $(cat copyfilelist);
       do
         cp -a ${cplist} /${cplist}
       done
      # postins
      if [ -f /tmp/azp-depends/${depends}/azptmp/postins ]
      then
        exec /tmp/azp-depends/${depends}/azptmp/postins
      fi
      rm -r /tmp/azp-depends/${depends}
      rm -r /tmp/azp-depends/latest-file
      echo "$finished" $"Installation is complete for depends"
     else
      info_version=$(sed -n 3p /var/cache/azp/applications/${depends}/info)
      echo "$warning" "${depends} --" $"Depends installed" "(${info_version:9})"
     fi
     cd $termdir
     clsperr ${depends}
    done
}
if [ -f /tmp/azp-depends-list ]
then
  for adl in $(cat /tmp/azp-depends-list);
  do
    rm -r /tmp/azp-depends-list &>/dev/null
    azp-depends depends ${adl}
  done
fi
[[ -d /tmp/azp-depends ]] && rm -r /tmp/azp-depends



# Bağımlılıq silmə
dependsr(){
  rm_depends=$1
  opnperr $rm_depends
  if [ ! -d /var/cache/azp/applications/$rm_depends ]
  then
    echo "$error" "$rm_depends" $"== depends not found !"
    exit 1
  fi
  echo "$remove" "$rm_depends" $"== remove depends..."
  # prerm
  if [ -f /var/cache/azp/applications/$rm_depends/prerm ]
  then
    exec /var/cache/azp/applications/$rm_depends/prerm
  fi
  for d_fayllar in $(cat /var/cache/azp/applications/$rm_depends/files);
  do
    rm -r $d_fayllar &>/dev/null
  done
    # Bağımlılıq yoxlama
    if [ -f /var/cache/azp/applications/$rm_depends/depends ]
    then
      read -p $"Find and delete depends ? [h/y]: " depends_r_secim
      if [[ "$depends_r_secim" == "h" ]]
      then
        for depends in $(cat /var/cache/azp/applications/${rm_depends}/depends);
        do
          dependsrd=$(azpdepends_read ${depends} $rm_depends)
          if [[ ${dependsrd} == "0" ]]
          then
            echo "$remove" $"Remove..."
            echo "${depends}" >> /tmp/azpdpindp
          else
            echo "$warning" $"Program depends not delete. Because, this depends used other program"
          fi
        done
      fi
      [[ "$depends_r_secim" == "y" ]] && echo "$process" $"Next process..."
    fi
  rm_d=$(cat /var/cache/azp/applications/$rm_depends/app-name)
  # postrm
  if [ -f /var/cache/azp/applications/$rm_depends/postrm ]
  then
    exec /var/cache/azp/applications/$rm_depends/postrm
  fi
  rm -r /var/cache/azp/applications/$rm_d &>/dev/null
  clsperr $rm_depends
}
if [ -f /tmp/azpdpindp ]
then
  for azpindp in $(cat /tmp/azpdpindp);
  do
    source /usr/bin/azp-depends 
    dependsr ${azpindp}
  done
fi