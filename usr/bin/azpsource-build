#!/bin/bash

### AZP Paket Sistemi 4.0
# AZP Offical Site: https://azp-paket-sistemi.github.io
# AZP Offical Depo: https://azp-paket-sistemi.github.io/azp-depo

# © 2021-2023 AZP
# © 2019-2023 PacPERRO


# Tərcümə faylı
TEXTDOMAINDIR=/usr/share/locale
TEXTDOMAIN=azpsource-build

# Rənglər
error=$(echo -e "\033[1;31m E: \033[:0m")
process=$(echo -e "\033[1;34m P: \033[:0m")
finished=$(echo -e "\033[1;32m F: \033[:0m")
info=$(echo -e "\033[1;36m I: \033[:0m")
remove=$(echo -e "\033[1;31m R: \033[:0m")
warning=$(echo -e "\033[1;33m V: \033[:0m")


# Root kontrol
if [ $UID -ne 0 ]
then
  echo "$error" $"Please open with root !" &>/dev/stderr
  exit 1
fi

# Prosessor arxitekturası
machine_arch=$(uname -m)

# Köhnə data silmə
datarm() {
   if [[ -d /tmp/azpstmp ]]
   then
     rm -r /tmp/azpstmp
     echo "$remove" $"Old data removed"
   fi
   if [[ -d /tmp/azpbstmp ]]
   then
     rm -r /tmp/azpbstmp
     echo "$remove" $"Old data removed"
   fi
}


# Proqram data qovluğu icazəsi
opnperr(){
  chattr -i /var/cache/azp/applications &>/dev/null
  chattr -i /var/cache/azp/applications/$1 &>/dev/null
}
clsperr(){
  chattr +i /var/cache/azp/applications/$1 &>/dev/null
  chattr +i /var/cache/azp/applications/ &>/dev/null
}



# Mənbə kodunu quraşdırma
azps_build(){
  datarm
  azpspack=$1
  if ! [[ "$azpspack" != "" ]]
  then
    echo "$error" $"The package was not selected !"
    exit 1
  fi
  [ -d /tmp/azpstmp/ ] && rm -r /tmp/azpstmp
  mkdir /tmp/azpstmp
  mkdir -p /tmp/azpstmp/package
  termdir=$(pwd -L)
  if [ ! -f $azpspack ]
  then
    echo "$error" $"Package Not Found !" &>/dev/stderr
    exit 1
  fi
  if ! unzip $azpspack -d /tmp/azpstmp/package &>/dev/null;
  then
    echo "$error" $"The package could not be broken !" &>/dev/stderr
    exit 1
  else
    echo "$process" $"Files Extract..."
  fi
  cd /tmp/azpstmp/package
  # azpbuild kontrol
  pack_name=$(sed -n 5p azpbuild)
  pack_release=$(sed -n 6p azpbuild)
  pack_version=$(sed -n 7p azpbuild)
  pack_maintainer=$(sed -n 8p azpbuild)
  pack_url=$(sed -n 9p azpbuild)
  pack_arch=$(sed -n 10p azpbuild)
  pack_source=$(sed -n 11p azpbuild)
  pack_depends=$(sed -n 12p azpbuild)
  pack_packname=$(sed -n 13p azpbuild)
  pack_packtype=$(sed -n 14p azpbuild)
  pack_description=$(sed -n 15p azpbuild)
  [ ${pack_name:0:4} != "name" ] && echo "$error" $"'name' is not written in the 'azpbuild' file" && exit
  [ ${pack_release:0:7} != "release" ] && echo "$error" $"'release' is not written in the 'azpbuild' file" && exit
  [ ${pack_version:0:7} != "version" ] && echo "$error" $"'version' is not written in the 'azpbuild' file" && exit
  [ ${pack_maintainer:0:10} != "maintainer" ] && echo "$error" $"'maintainer' is not written in the 'azpbuild' file" && exit
  [ ${pack_url:0:3} != "url" ] && echo "$error" $"'url' is not written in the 'azpbuild' file" && exit
  [ ${pack_arch:0:4} != "arch" ] && echo "$error" $"'arch' is not written in the 'azpbuild' file" && exit
  [ ${pack_source:0:6} != "source" ] && echo "$error" $"'source' is not written in the 'azpbuild' file" && exit
  [ ${pack_depends:0:7} != "depends" ] && echo "$error" $"'depends' is not written in the 'azpbuild' file" && exit
  [ ${pack_packname:0:7} != "package" ] && echo "$error" $"'package' is not written in the 'azpbuild' file" && exit
  [ ${pack_packtype:0:8} != "packtype" ] && echo "$error" $"'packtype' is not written in the 'azpbuild' file" && exit
  [ ${pack_description:0:11} != "description" ] && echo "$error" $"'description' is not written in the 'azpbuild' file" && exit
  # azpbuild çalışdırma
  source azpbuild &>/dev/null
  opnperr $name
  # Proqramın quraşdırılmış olub olmamasını yoxlama
  if [ -d /var/cache/azp/applications/$name ]
  then
    version=$(sed -n 3p /var/cache/azp/applications/$name/info)
    echo "$warning" "$name" $"== Installed program (${version:9})"
    exit
  fi
  # 'app-name' və 'info' yazdırma
  # 'app-name'
  echo "$name" >> /tmp/azpstmp/package/app-name
  # 'info'
  echo "name: $name" >> /tmp/azpstmp/package/info
  if [ ${#description} -lt 120 ]
  then
    echo "description: $description" >> /tmp/azpstmp/package/info
  else
    echo "description: *" >> /tmp/azpstmp/package/info
    longdescription="description: $description"
  fi
  echo "version: $version" >> /tmp/azpstmp/package/info
  echo "maintainer: $maintainer" >> /tmp/azpstmp/package/info
  echo "architecture: $arch" >> /tmp/azpstmp/package/info
  printf "$longdescription" >> /tmp/azpstmp/package/info
  # Paket yoxlama
  if [ ! -f $package ]
  then
    echo "$process" "$package" $"== not found ! Therefore, the package will be downloaded again..."
    echo "$info" $"Source web:" "$url"
    echo "$info" $"Source package:" "$source"
    wget -q --show-progress $source
    # Paket tipi yoxlama
    # tar
    if [ $packtype = "tar" ]
    then
      if ! tar -xvf $package -C /tmp/azpstmp/package;
      then
        echo "$error" $"The package could not be broken !" &>/dev/stderr
        exit 1
      else
        echo "$info" $"Package type: " "$packtype"
        echo "$process" $"Files Extract..."
      fi
    # zip
    elif [ $packtype = "zip" ]
    then
      if ! unzip $package -d /tmp/azpstmp/package;
      then
        echo "$error" $"The package could not be broken !" &>/dev/stderr
        exit 1
      else
        echo "$info" $"Package type: " "$packtype"
        echo "$process" $"Files Extract..."
      fi
    fi
  fi
  # Paket tipi yoxlama
  # tar
  if [ $packtype = "tar" ]
  then
    if ! tar -xvf $package -C /tmp/azpstmp/package;
    then
      echo "$error" $"The package could not be broken !" &>/dev/stderr
      exit 1
    else
      echo "$process" $"Files Extract..."
    fi
  # zip
  elif [ $packtype = "zip" ]
  then
    if ! unzip $package -d /tmp/azpstmp/package;
    then
      echo "$error" $"The package could not be broken !" &>/dev/stderr
      exit 1
    else
      echo "$process" $"Files Extract..."
    fi
  fi
  echo "$process" $"Building source files..."
  # Mənbə bağımlılıqları quraşdırma
  if [ ! -z $depends ]
  then
    for dps in $depends;
    do
      echo "$process" $"Install depends..."
      source azp-depends
      source_depends ${dps}
    done
  fi
  source azpbuild
  if command -v setup &>/dev/null;
  then
    if ! setup;
    then
      echo "$error" "setup" $"== work error !" &>/dev/stderr
    fi
  fi
  if ! build;
  then
    echo "$error" "build" $"== work error !" &>/dev/stderr
    exit 1
  fi
  echo "$process" $"Install source files..."
  # Keş fayl qovluğu
  mkdir -p /tmp/azpstmp_cacheprg
  if ! package /tmp/azpstmp_cacheprg;
  then
    echo "$error" "package" $"== work error !" &>/dev/stderr
    exit
  fi
  if command -v config &>/dev/null;
  then
    if ! config /tmp/azpbstmp_cacheprg;
    then
      echo "$error" "config" $"== work error !" &>/dev/stderr
    fi
  fi
  opnperr $name
  # postrm
  if [ -f /tmp/azpstmp/package/postrm ]
  then
    cp /tmp/azptmp/postrm /var/cache/azp/applications/$name
  fi
  # prerm
  if [ -f /tmp/azpstmp/package/postrm ]
  then
    cp /tmp/azptmp/prerm /var/cache/azp/applications/$name
  fi
  # preins
  if [ -f /tmp/azpstmp/package/preins ]
  then
    echo "$process" $"preins >> running..."
    cd /tmp/azpstmp/package
    ./preins
  fi
  mkdir -p /var/cache/azp/applications/$name
  # app-name və info fayllarını kopyalama
  cp -a /tmp/azpstmp/package/app-name /tmp/azpstmp/package/info /var/cache/azp/applications/$name/
  cd /tmp/azpstmp_cacheprg
  echo "$(find *)" >> srcfilelist
  echo "$process" $"Create files list..."
  for list in $(cat srcfilelist);
  do
    if [ -f ${list} ]
    then
      echo "/${list}" >> /var/cache/azp/applications/$name/files
      echo "${list}" >> copyfilelist
    else
      echo "${list}" >> folderslist
    fi
  done
  [[ ! -f copyfilelist ]] && touch copyfilelist
  echo "$process" $"Create folders list..."
  touch /tmp/azpstmp_cacheprg/notfolders
  for folders in $(cat folderslist);
  do
    if [ ! -s /${folders} ]
    then
      echo "${folders}" >> /tmp/azpstmp_cacheprg/notfolders
    fi
  done
  for notfolders in $(cat /tmp/azpstmp_cacheprg/notfolders);
  do
    mkdir -p /${notfolders}
    echo "/${notfolders}" >> /var/cache/azp/applications/$name/files
  done
  echo "$process" $"Files copied to file system..."
  for cplist in $(cat copyfilelist);
  do
    cp -a ${cplist} /${cplist}
  done
  echo "$finished" $"Files been copied to the file system"
  # postins
  if [ -f /tmp/azpstmp/package/postins ]
  then
    echo "$process" $"postins >> running..."
    cd /tmp/azpstmp/package/
    ./postins
    cd /tmp/azpstmp_cacheprg
  fi
  # Proqram məlumatlarını nüxsələmə
  cd /var/cache/azp/applications/$name
  appdata_files="app-name info files depends postrm prerm"
  for prgafiles in "$appdata_files";
  do
    tar -zcvf azp-reinfo-$name.tar.gz ${prgafiles} &>/dev/null
  done
  cp -a azp-reinfo-$name.tar.gz /var/backups/
  rm -r azp-reinfo-$name.tar.gz
  echo "$remove" $"Remove cache..."
  rm -r /tmp/azpstmp_cacheprg
  datarm
  [[ -d $termdir ]] && cd $termdir
  clsperr $name
  echo "$finished" $"Process Finished"
}




# AZP mənbə paketini normal azp paketinə çevirmə
azps_cazp(){
  datarm
  azpspack=$1
  if ! [[ "$azpspack" != "" ]]
  then
    echo "$error" $"The package was not selected !"
    exit 1
  fi
  [ -d /tmp/azpstmp/ ] && rm -r /tmp/azpstmp
  mkdir /tmp/azpstmp
  mkdir -p /tmp/azpstmp/package
  termdir=$(pwd -L)
  if [ ! -f $azpspack ]
  then
    echo "$error" $"Package Not Found !" &>/dev/stderr
    exit
  fi
  if ! unzip $azpspack -d /tmp/azpstmp/package &>/dev/null;
  then
    echo "$error" $"The package could not be broken !" &>/dev/stderr
    exit
  else
    echo "$process" $"Files Extract..."
  fi
  cd /tmp/azpstmp/package
  # azpbuild kontrol
  pack_name=$(sed -n 5p azpbuild)
  pack_release=$(sed -n 6p azpbuild)
  pack_version=$(sed -n 7p azpbuild)
  pack_maintainer=$(sed -n 8p azpbuild)
  pack_url=$(sed -n 9p azpbuild)
  pack_arch=$(sed -n 10p azpbuild)
  pack_source=$(sed -n 11p azpbuild)
  pack_depends=$(sed -n 12p azpbuild)
  pack_packname=$(sed -n 13p azpbuild)
  pack_packtype=$(sed -n 14p azpbuild)
  pack_description=$(sed -n 15p azpbuild)
  [ ${pack_name:0:4} != "name" ] && echo "$error" $"'name' is not written in the 'azpbuild' file" && exit
  [ ${pack_release:0:7} != "release" ] && echo "$error" $"'release' is not written in the 'azpbuild' file" && exit
  [ ${pack_version:0:7} != "version" ] && echo "$error" $"'version' is not written in the 'azpbuild' file" && exit
  [ ${pack_maintainer:0:10} != "maintainer" ] && echo "$error" $"'maintainer' is not written in the 'azpbuild' file" && exit
  [ ${pack_url:0:3} != "url" ] && echo "$error" $"'url' is not written in the 'azpbuild' file" && exit
  [ ${pack_arch:0:4} != "arch" ] && echo "$error" $"'arch' is not written in the 'azpbuild' file" && exit
  [ ${pack_source:0:6} != "source" ] && echo "$error" $"'source' is not written in the 'azpbuild' file" && exit
  [ ${pack_depends:0:7} != "depends" ] && echo "$error" $"'depends' is not written in the 'azpbuild' file" && exit
  [ ${pack_packname:0:7} != "package" ] && echo "$error" $"'package' is not written in the 'azpbuild' file" && exit
  [ ${pack_packtype:0:8} != "packtype" ] && echo "$error" $"'packtype' is not written in the 'azpbuild' file" && exit
  [ ${pack_description:0:11} != "description" ] && echo "$error" $"'description' is not written in the 'azpbuild' file" && exit
  # azpbuild çalışdırma
  source azpbuild
  if [ ! -f $package ]
  then
    echo "$process" "$package" $"== not found ! Therefore, the package will be downloaded again..."
    echo "$info" $"Source web:" "$url"
    echo "$info" $"Source package:" "$source"
    wget -q --show-progress $source
    # Paket tipi yoxlama
    # tar
    if [ $packtype = "tar" ]
    then
      if ! tar -xvf $package -C /tmp/azpstmp/package;
      then
        echo "$error" $"The package could not be broken !" &>/dev/stderr
        exit
      else
        echo "$info" $"Package type: " "$packtype"
        echo "$process" $"Files Extract..."
      fi
    # zip
    elif [ $packtype = "zip" ]
    then
      if ! unzip $package -d /tmp/azpstmp/package;
      then
        echo "$error" $"The package could not be broken !" &>/dev/stderr
        exit
      else
        echo "$info" $"Package type:" "$packtype"
        echo "$process" $"Files Extract..."
      fi
    fi
  fi
  # Paket tipi yoxlama
  # tar
  if [ $packtype = "tar" ]
  then
    if ! tar -xvf $package -C /tmp/azpstmp/package;
    then
      echo "$error" $"The package could not be broken !" &>/dev/stderr
      exit
    else
      echo "$process" $"Files Extract..."
    fi
  # zip
  elif [ $packtype = "zip" ]
  then
    if ! unzip $package -d /tmp/azpstmp/package;
    then
      echo "$error" $"The package could not be broken !" &>/dev/stderr
      exit
    else
      echo "$process" $"Files Extract..."
    fi
  fi
  echo "$process" $"Building source files..."
  source ../$azpbsbuild_script
  if command -v setup &>/dev/null;
  then
    if ! setup;
    then
      echo "$error" "setup" $"== work error !" &>/dev/stderr
    fi
  fi
  if ! build;
  then
    echo "$error" "build" $"== work error !" &>/dev/stderr
    exit 1
  fi
  echo "$process" $"Install source files..."
  # Keş fayl qovluğu
  mkdir -p /tmp/azpstmp_cacheprg
  if ! package /tmp/azpstmp_cacheprg;
  then
    echo "$error" "package" $"== work error !" &>/dev/stderr
    exit
  fi
  if command -v config &>/dev/null;
  then
    if ! config /tmp/azpstmp_cacheprg;
    then
      echo "$error" "config" $"== work error !" &>/dev/stderr
    fi
  fi
  # AZP normal paket üçün yer ayırma
  echo "$process" $"AZP source package convert normal AZP package..."
  mkdir -p /tmp/azpnp_cache/azpsrc
  for pfiles in { postins postrm preins prerm };
  do
    if [ -f ${pfiles} ]
    then
      cp -a ${pfiles} /tmp/azpnp_cache/
    fi
  done
  cp -a /tmp/azpstmp_cacheprg/* /tmp/azpnp_cache/azpsrc
  # 'app-name' və 'info' yazdırma
  # 'app-name'
  source ../azpbuild
  echo "$name" >> /tmp/azpnp_cache/app-name
  # 'info'
  echo "name: $name" >> /tmp/azpnp_cache/info
  if [ ${#description} -lt 120 ]
  then
    echo "description:$description" >> /tmp/azpnp_cache/info
  else
    echo "description: *" >> /tmp/azpnp_cache/info
    longdescription="description: $description"
  fi
  echo "version: $version" >> /tmp/azpnp_cache/info
  echo "maintainer: $maintainer" >> /tmp/azpnp_cache/info
  echo "architecture: $arch" >> /tmp/azpnp_cache/info 
  printf "$longdescription" >> /tmp/azpnp_cache/info
  cd /tmp/azpnp_cache/azpsrc
  echo "$(find . -type f -exec md5sum {} + | LC_ALL=C sort)" >> ../src_md5sum
  tar -cvjSf ../src.tar.bz2 *
  cd ..
  rm -r azpsrc
  package_name=''$name'_'$version'.azp'
  zip $termdir/$package_name *
  cd $termdir
  rm -r /tmp/azpnp_cache /tmp/azpstmp_cacheprg
  datarm
  echo "$finished" $"Process Finished"
  echo "$finished" $"Package:" "== $termdir/$package_name"
}




# layihə.azpbs skriptini .azp paketinə çevirmə
azpbs_build(){
  datarm
  azpbsbuild_script=$1
  if ! [[ "$azpbsbuild_script" != "" ]]
  then
    echo "$error" $"The script was not selected !"
    exit 1
  fi
  [ -d /tmp/azpbstmp/ ] && rm -r /tmp/azpbstmp
  termdir=$(pwd -L)
  mkdir -p /tmp/azpbstmp
  if ! cp -a $azpbsbuild_script /tmp/azpbstmp;
  then
    echo "$error" "$azpbsbuild_script" $"== script not found !"
    exit 1
  fi
  cd /tmp/azpbstmp
  # azpbs script kontrol
  pack_name=$(sed -n 5p $azpbsbuild_script)
  pack_release=$(sed -n 6p $azpbsbuild_script)
  pack_version=$(sed -n 7p $azpbsbuild_script)
  pack_maintainer=$(sed -n 8p $azpbsbuild_script)
  pack_url=$(sed -n 9p $azpbsbuild_script)
  pack_arch=$(sed -n 10p $azpbsbuild_script)
  pack_source=$(sed -n 11p $azpbsbuild_script)
  pack_packname=$(sed -n 12p $azpbsbuild_script)
  pack_packtype=$(sed -n 13p $azpbsbuild_script)
  pack_description=$(sed -n 14p $azpbsbuild_script)
  [ ${pack_name:0:4} != "name" ] && echo "$error" "'$azpbsbuild_script'" $"'name' is not written in the file" && exit
  [ ${pack_release:0:7} != "release" ] && echo "$error" "'$azpbsbuild_script'" $"'release' is not written in the file" && exit
  [ ${pack_version:0:7} != "version" ] && echo "$error" "'$azpbsbuild_script'" $"'version' is not written in the file" && exit
  [ ${pack_maintainer:0:10} != "maintainer" ] && echo "$error" "'$azpbsbuild_script'" $"'maintainer' is not written in the file" && exit
  [ ${pack_url:0:3} != "url" ] && echo "$error" "'$azpbsbuild_script'" $"'url' is not written in the file" && exit
  [ ${pack_arch:0:4} != "arch" ] && echo "$error" "'$azpbsbuild_script'" $"'arch' is not written in the file" && exit
  [ ${pack_source:0:6} != "source" ] && echo "$error" "'$azpbsbuild_script'" $"'source' is not written in the file" && exit
  [ ${pack_packname:0:7} != "package" ] && echo "$error" "'$azpbsbuild_script'" $"'package' is not written in the file" && exit
  [ ${pack_packtype:0:8} != "packtype" ] && echo "$error" "'$azpbsbuild_script'" $"'packtype' is not written in the file" && exit
  [ ${pack_description:0:11} != "description" ] && echo "$error" "'$azpbsbuild_script'" $"'description' is not written in the file" && exit
  source $azpbsbuild_script &>/dev/null
  # Paketi yükləmə
  echo "$info" $"Source web:" "$url"
  echo "$info" $"Source package:" "$source"
  wget -q --show-progress $source
  mkdir -p /tmp/azpbstmp/package
  # Paket tipi yoxlama
  # tar
  if [ $packtype = "tar" ]
  then
    if ! tar -xvf $package -C /tmp/azpbstmp/package;
    then
      echo "$error" $"The package could not be broken !" &>/dev/stderr
      exit
    else
      echo "$process" $"Files Extract..."
    fi
  # zip
  elif [ $packtype = "zip" ]
  then
    if ! unzip $package -d /tmp/azpbstmp/package;
    then
      echo "$error" $"The package could not be broken !" &>/dev/stderr
      exit
    else
      echo "$process" $"Files Extract..."
    fi
  fi
  cd package
  source ../$azpbsbuild_script
  if command -v setup &>/dev/null;
  then
    if ! setup;
    then
      echo "$error" "setup" $"== work error !" &>/dev/stderr
    fi
  fi
  if ! build;
  then
    echo "$error" "build" $"== work error !" &>/dev/stderr
    exit 1
  fi
  echo "$process" $"Install source files..."
  # Keş fayl qovluğu
  mkdir -p /tmp/azpbstmp_cacheprg
  if ! package /tmp/azpbstmp_cacheprg/;
  then
    echo "$error" "package" $"== work error !" &>/dev/stderr
    exit
  fi
  if command -v config &>/dev/null;
  then
    if ! config /tmp/azpbstmp_cacheprg;
    then
      echo "$error" "config" $"== work error !" &>/dev/stderr
    fi
  fi
  # AZP normal paket üçün yer ayırma
  echo "$process" $"AZP source package convert normal AZP package..."
  mkdir -p /tmp/azpnp_cache/azpsrc
  cp -a /tmp/azpbstmp_cacheprg/* /tmp/azpnp_cache/azpsrc
  # 'app-name' və 'info' yazdırma
  # 'app-name'
  echo "$name" >> /tmp/azpnp_cache/app-name
  # 'info'
  echo "name: $name" >> /tmp/azpnp_cache/info
  if [ ${#description} -lt 120 ]
  then
    echo "description: $description" >> /tmp/azpnp_cache/info
  else
    echo "description: *" >> /tmp/azpnp_cache/info
    longdescription="description: $description"
  fi
  echo "version: $version" >> /tmp/azpnp_cache/info
  echo "maintainer: $maintainer" >> /tmp/azpnp_cache/info
  echo "architecture: $arch" >> /tmp/azpnp_cache/info 
  printf "$longdescription" >> /tmp/azpnp_cache/info 
  cd /tmp/azpnp_cache/azpsrc
  echo "$(find . -type f -exec md5sum {} + | LC_ALL=C sort)" >> ../src_md5sum
  tar -cvjSf ../src.tar.bz2 *
  cd ..
  rm -r azpsrc
  package_name=''$name'_'$version'.azp'
  zip $termdir/$package_name *
  rm -r /tmp/azpnp_cache /tmp/azpbstmp_cacheprg /tmp/azpbstmp
  datarm
  echo "$finished" $"Package:" "== $termdir/$package_name"
  if [[ "$2" == "-ins" ]]
  then
    echo "$process" $"Install package:" "$package_name"
    cd $termdir
    azp -i $package_name
  fi
}